<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
    <title>Ejecutar servicios</title>
    <style>
        .container {
            max-width: 1250px;
        }

        .ajustesServiceChoose {
            margin-left: 10px;
            margin-right: 10px;
        }

        .ajustesSelectgrpc {
            margin-left: 15px;
            margin-right: 10px;
        }

        .ajustesAllatributes {
            margin-left: 19px;
            margin-right: 19px;

        }

        .ajustes {
            padding: 1.5%;
        }
    </style>
</head>
<body>

<%- include("partials/tabNavigation") %>

<div class="container">
    <h1>Ejecuta tus Servicios!</h1>
    <div id="div_principal" class="shadow-lg pb-3 mb-10 bg-body rounded ajustes">
        <form action="/ejecuteService" method="POST">


            <h2>Elige el servicio a utilizar</h2>

            <label>Hostname</label> <input class="form-control" type="text" name="hostname" placeholder="127.0.0.1"/>
            <label>Port </label> <input class="form-control" type="text" name="port" placeholder="50051"/>

            <div id="AllSelect" style="margin-top: 1em;">
                <div id="ElegirServicio" class="d-grid gap-2 ajustesServiceChoose">
                    <select onchange="mostrarGrpcs()" name="ServiceChoose" style="display:block;" id="ServiceChoose"
                            class="form-select" aria-label="Default select example" required>
                        <option value="noyet" selected="selected">Choose a service</option>
                        <% servicios.forEach( (servicio) => { %>
                            <option value='<%= servicio.name %>' required><%= servicio.name %></option>
                        <% }) %>
                    </select>
                </div>
                <h2 style="display:none;" id="TituloChooseGrpc">Elige el grpc deseado</h2>

            </div>

            <h2 style="display:none" id="TituloConfigAtrb"> Configura los atributos a tu gusto (Request)</h2>
            <div id="AllAtributes" class="ajustesAllatributes">
                <!-- Aquí se insertan de forma dinámica los parámetros en forma de campos de input -->
            </div>


            <div class="d-grid gap-2 d-md-flex justify-content-md-end">

                <button id="add_new_message" type="submit" class="btn btn-primary">Submit</button>
            </div>

        </form>


    </div>
</div>


<script>


    //Listas de mensajes y servicios existentes
    const servicios_ejs = JSON.parse('<%- JSON.stringify(servicios) %>');
    const messages_ejs = JSON.parse('<%- JSON.stringify(messages) %>');


    // Select field for choosing a given service
    var ServiceChoose = document.getElementById('ServiceChoose');

    var nuevodiv = document.createElement('div');
    nuevodiv.setAttribute('id', 'GrpcChoose');
    nuevodiv.setAttribute('class', 'd-grid gap-2 ajustesSelectgrpc');


    var AllSelect = document.getElementById('AllSelect');
    //Padre de todos los campos atributo a rellenar
    var AllAtributes = document.getElementById('AllAtributes');


    //Div contenedora de todos los campos de atributo
    var divrowmb3 = document.createElement('div');
    divrowmb3.setAttribute('id', 'divrowmb3');
    divrowmb3.setAttribute('class', 'row mb-3');
    AllAtributes.appendChild(divrowmb3);

    var TituloChooseGrpc = document.getElementById('TituloChooseGrpc');


    function mostrarGrpcs() {
        TituloChooseGrpc.style.display = 'block';


        // La primera vez que ejecutemos el div no contendrá selects
        while (nuevodiv.firstChild) {
            nuevodiv.removeChild(nuevodiv.firstChild);
        }

        //Eliminamos tipos de mensajes siestñan selecionados
        while (divrowmb3.firstChild) {
            divrowmb3.removeChild(divrowmb3.firstChild);
        }

        TituloConfigAtrb.style.display = 'none';

        /*
        if(nuevodiv.childNodes.length>0){
        //    console.log(nuevodiv.childElementCount);
        //    console.log(nuevodiv);
            nuevodiv.firstChild.remove();
        }*/
        servicios_ejs.forEach(servicio => {

            if (servicio.name == ServiceChoose.value) {

                var newselect = document.createElement('select');
                newselect.setAttribute('class', 'form-select');
                newselect.setAttribute('aria-label', 'Default select example');
                newselect.setAttribute('name', 'grpcChoose');
                newselect.setAttribute('id', 'grpcChooseSelect');
                newselect.setAttribute('onchange', 'mostrarMessages()');

                var newOptionDefault = document.createElement('option');
                newOptionDefault.setAttribute('selected', 'selected');
                newOptionDefault.setAttribute('value', 'noyet');
                newOptionDefault.innerHTML = 'choose a grpc';

                servicio.grpcs.forEach(grpc => {
                    var newOption = document.createElement('option');
                    //  newOption.setAttribute('selected', 'selected');
                    newOption.setAttribute('value', grpc.name);
                    newOption.innerHTML = grpc.name;
                    newselect.appendChild(newOption);
                })
                newselect.appendChild(newOptionDefault);
                nuevodiv.appendChild(newselect);
                AllSelect.appendChild(nuevodiv);
            }
        });
    }


    /**
     * Se ejecuta cada vez que se selecciona un Grpc para ejecutar.
     */
    function mostrarMessages() {

        console.group("Mostrar grpc Messages: ")


        var TituloConfigAtrb = document.getElementById('TituloConfigAtrb');
        TituloConfigAtrb.style.display = 'block';

        console.log('crear mensajes y eliminar y tal');
        console.log(nuevodiv.firstChild.value);
        console.log(ServiceChoose.value);

        // La llamada que quiere realizar el usuario
        let grpcChosen = ServiceChoose.value;


        //Elimina los hijos del div a rellenar para sobreescribir con los del nuevo mensaje
        while (divrowmb3.firstChild) {
            divrowmb3.removeChild(divrowmb3.firstChild);
        }


        //Extraemos los nombres de los parámetros de la request
        let request;
        servicios_ejs.forEach(
            servicio => {
                if (servicio.name == grpcChosen) {
                    // console.log('servicio.name');
                    // console.log(servicio.name);

                    servicio.grpcs.forEach(grpc => {
                        if (grpc.name == nuevodiv.firstChild.value) {
                            console.log('grpc.name');
                            console.log(grpc.name);
                            request = grpc.request;
                            console.log(request);
                        }
                    })
                }
            })

        console.log(`Request message type: ${request}`)


        // Aquí se generan los campos de input para el mensaje seleccionado actualmente!!!!!!
        // Se pueden optimizar estas cosas para que no haya que iterar sobre todos los mensajes que existen
        messages_ejs.forEach(
            message => {
                if (message.name === request) {

                    // Sacamos todos los componentes de un mensaje (nombres de cada parámetro)
                    message.types.forEach(
                        msgtype => {
                            console.log("Creando campo de entrada para ")
                            console.log(msgtype);
                            var divcolsm8 = document.createElement('div');
                            divcolsm8.setAttribute('class', 'col-sm-8');


                            //Creamos un campo input desactivado que muestra el nombre del parámetro a introducir
                            var newinputdisabled = document.createElement('input');
                            newinputdisabled.setAttribute('type', 'text');
                            newinputdisabled.classList.add('disabledTextInput');
                            newinputdisabled.setAttribute('class', 'form-control');
                            newinputdisabled.value = msgtype.typename;
                            newinputdisabled.setAttribute('name', 'typeAtrb[]');
                            newinputdisabled.setAttribute('readonly', '');


                            divcolsm8.appendChild(newinputdisabled);


                            var divcol = document.createElement('div');
                            divcol.setAttribute('class', 'col');
                            var newinput = document.createElement('input');
                            newinput.setAttribute('class', 'form-control');
                            //ver si es int o tal
                            newinput.setAttribute('name', 'nameAtrb[]');

                            //[@alreylz]
                            let newinputHidden = document.createElement('input');
                            newinputHidden.setAttribute("name", "tipo[]");
                            newinputHidden.setAttribute("style", "display:none;");
                            let grpcDatatype = msgtype.tipo;
                            newinputHidden.setAttribute("value", grpcDatatype)

                            // newinput.setAttribute("data-datatype", grpcDatatype);


                            var placeholder = 'Type: ' + msgtype.tipo;
                            newinput.setAttribute('placeholder', placeholder);
                            if (msgtype.tipo == 'int32') {
                                newinput.setAttribute('type', 'number');
                            } else {
                                newinput.setAttribute('type', 'text');
                            }


                            //Si no es un mensaje compuesto
                            // if (msgtype.tipo !== "Request")
                            divcol.appendChild(newinput);
                            // else {
                            // for (let i = 0; i < 2; i++) {
                            //
                            //     //@alreylz NUEVO
                            //     let nestedInput = document.createElement("div")
                            //     nestedInput.classList.add("row")
                            //
                            //     //Tenemos siempre 3 campos input
                            //     //1. Indica el tipo del elemento
                            //     const AnotherNewinputHidden = document.createElement('input');
                            //     AnotherNewinputHidden.setAttribute("name", "tipo[]");
                            //     AnotherNewinputHidden.setAttribute("style", "display:none;");
                            //     AnotherNewinputHidden.value = "tipoDeDatosDelCampo"
                            //
                            //     //2. Muestra el nombre del tipo de datos
                            //     const inputLabel = document.createElement("input");
                            //     inputLabel.setAttribute("type", "text");
                            //     inputLabel.setAttribute("name", "typeAtrb[]");
                            //     inputLabel.setAttribute("readonly", "");
                            //     inputLabel.value = "nombreDelCampo"
                            //
                            //     // 3. Permite introducir el valor del campo a enviar
                            //     const actualInput = document.createElement('input');
                            //     actualInput.setAttribute('class', 'form-control');
                            //     //ver si es int o tal
                            //     actualInput.setAttribute('name', 'nameAtrb[]');
                            //     actualInput.placeholder = `Type: tipo de datos del Campo`;
                            //
                            //
                            //     nestedInput.appendChild(AnotherNewinputHidden);
                            //     nestedInput.appendChild(inputLabel);
                            //     nestedInput.appendChild(actualInput);
                            //     divcol.appendChild(nestedInput)
                            //
                            // }
                            //@alreylz NUEVO ----
                            // }


                            divrowmb3.appendChild(divcolsm8);
                            divrowmb3.appendChild(divcol);
                            divrowmb3.appendChild(newinputHidden);// |added

                        })
                }
            })
        console.groupEnd();

    }


</script>


<!-- Option 1: Bootstrap Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
        crossorigin="anonymous"></script>


</body>
</html>


<!-- Optional JavaScript; choose one of the two! -->
